from django.contrib.auth.models import Group
from django.contrib.gis.db import models as gismodels
from django.db import models
from django.utils.translation import gettext_lazy as _
from simple_history.models import HistoricalRecords


class Shorturl(models.Model):
    """
    Model used to store shorturls generated by users in the fronend
    """

    url = models.URLField(blank=True, null=True)
    ref = models.CharField(unique=True, max_length=20)
    creator_email = models.CharField(max_length=200, blank=True, null=True)
    creation = models.DateTimeField(blank=True, null=True)
    last_hit = models.DateTimeField(blank=True, null=True)
    nb_hits = models.IntegerField(blank=True, null=True)

    class Meta:
        verbose_name = _("URl courte")
        verbose_name_plural = _("URls courtes")


class Dimension(models.Model):
    name = models.CharField(blank=True, null=True)
    value = models.CharField(blank=True, null=True)
    description = models.CharField(blank=True, null=True)
    layer = models.ForeignKey("Layer", models.DO_NOTHING)
    field = models.CharField(blank=True, null=True)
    history = HistoricalRecords()

    class Meta:
        verbose_name = _("Dimension")
        verbose_name_plural = _("Dimensions")


class Functionality(models.Model):
    name = models.CharField()
    value = models.CharField()
    description = models.CharField(blank=True, null=True)
    group = models.ManyToManyField(Group)
    history = HistoricalRecords()

    class Meta:
        verbose_name = _("Fonctionnalité")
        verbose_name_plural = _("Fonctionnalités")


class Interface(models.Model):

    """
    Model that matches a configuration with a interface configuration (desktop, mobile, api, ...)
    """

    name = models.CharField(blank=True, null=True)
    description = models.CharField(blank=True, null=True)
    history = HistoricalRecords()

    class Meta:
        verbose_name = _("Interface")
        verbose_name_plural = _("Interfaces")


class Layer(models.Model):
    """
    Base model for geographic Layer
    """

    treeitem = models.OneToOneField(
        "Treeitem",
        on_delete=models.CASCADE,
        related_name="layer",
        null=True,
    )
    public = models.BooleanField(blank=True, null=True)
    geo_table = models.CharField(blank=True, null=True)
    exclude_properties = models.CharField(blank=True, null=True)
    interface = models.ManyToManyField(Interface)
    history = HistoricalRecords()

    class Meta:
        verbose_name = _("Couche")
        verbose_name_plural = _("Couches")


class LayerVectortiles(models.Model):
    """
    Layer extension for vector tile layer
    """

    layer = models.OneToOneField(
        Layer,
        on_delete=models.CASCADE,
        related_name="layervectortile",
        null=True,
    )
    style = models.CharField()
    xyz = models.CharField(blank=True, null=True)
    sql = models.CharField(blank=True, null=True)
    history = HistoricalRecords()

    class Meta:
        verbose_name = _("Vector Tile")
        verbose_name_plural = _("Vector Tiles")


class LayerWms(models.Model):
    """
    Layer extension for WMS layer"""

    layer = models.OneToOneField(
        Layer,
        on_delete=models.CASCADE,
        related_name="layerwms",
        null=True,
    )
    ogc_server = models.ForeignKey("OgcServer", models.DO_NOTHING)
    layer = models.CharField()
    style = models.CharField(blank=True, null=True)
    time_mode = models.CharField()
    time_widget = models.CharField()
    valid = models.BooleanField(blank=True, null=True)
    invalid_reason = models.CharField(blank=True, null=True)
    history = HistoricalRecords()

    class Meta:
        verbose_name = _("Couche WMS")
        verbose_name_plural = _("Couches WMS")


class LayerWmts(models.Model):
    """
    Layer extension for WMTS layer"""

    layer = models.OneToOneField(
        Layer,
        on_delete=models.CASCADE,
        related_name="layerwmts",
        null=True,
    )
    url = models.URLField()
    layer = models.CharField()
    style = models.CharField(blank=True, null=True)
    matrix_set = models.CharField(blank=True, null=True)
    image_type = models.CharField(max_length=10)
    history = HistoricalRecords()

    class Meta:
        verbose_name = _("Couche WMTS")
        verbose_name_plural = _("Couches WMTS")


class Layergroup(models.Model):

    treegroup = models.OneToOneField(
        "Treegroup",
        on_delete=models.CASCADE,
        related_name="layergroup",
        null=True,
    )
    history = HistoricalRecords()


class LayergroupTreeitem(models.Model):
    treegroup = models.ForeignKey("Treegroup", on_delete=models.DO_NOTHING)
    treeitem = models.ForeignKey("Treeitem", on_delete=models.DO_NOTHING)
    ordering = models.PositiveIntegerField(blank=True, null=True)
    description = models.CharField(blank=True, null=True)
    history = HistoricalRecords()

    class Meta:
        ordering = ["ordering"]
        verbose_name = _("Groupe de couche")
        verbose_name_plural = _("Groupes de couche")


class Metadata(models.Model):
    """
    Generic Model for fine grained configuration
    """

    name = models.CharField(blank=True, null=True)
    value = models.CharField(blank=True, null=True)
    description = models.CharField(blank=True, null=True)
    item = models.ForeignKey("Treeitem", models.DO_NOTHING)
    history = HistoricalRecords()

    class Meta:
        verbose_name = _("Métadonnée")
        verbose_name_plural = _("Métadonnées")


class OgcServer(models.Model):
    """
    Definition of cartographic servers that can be selected when configurating layers
    """

    name = models.CharField(unique=True)
    description = models.CharField(blank=True, null=True)
    url = models.URLField()
    url_wfs = models.URLField(blank=True, null=True)
    type = models.CharField()
    image_type = models.CharField()
    auth = models.CharField()
    wfs_support = models.BooleanField(blank=True, null=True)
    is_single_tile = models.BooleanField(blank=True, null=True)
    history = HistoricalRecords()

    class Meta:
        verbose_name = _("Serveur OGC")
        verbose_name_plural = _("Serveurs OGC")


class Restrictionarea(models.Model):
    """
    Model that defines a geographic area that group (role) can see or edit
    """

    name = models.CharField(blank=True, null=True)
    description = models.CharField(blank=True, null=True)
    readwrite = models.BooleanField(blank=True, null=True)
    area = gismodels.PolygonField(null=True)
    buffer = models.TextField(blank=True, null=True)
    layer = models.ManyToManyField(Layer)
    group = models.ManyToManyField(Group)
    history = HistoricalRecords()

    class Meta:
        verbose_name = _("Aire de restriction")
        verbose_name_plural = _("Aires de restriction")


class Role(models.Model):
    """
    Extension of the Django Group model, adding geographic area
    for fine grained spatial access control
    """

    group = models.OneToOneField(
        Group,
        on_delete=models.CASCADE,
        related_name="role",
        null=True,
    )
    description = models.CharField(blank=True, null=True)
    extent = gismodels.MultiPolygonField(null=True)
    history = HistoricalRecords()

    class Meta:
        verbose_name = _("Role")
        verbose_name_plural = _("Roles")


class Theme(models.Model):
    """
    Top item of layer tree organization
    """

    # Question: still useful for Geogirafe viewer ?
    # treegroup = models.OneToOneField('Treegroup', models.DO_NOTHING, related_name="theme")
    layergrouptreeitem = models.ManyToManyField(
        LayergroupTreeitem, related_name="theme"
    )
    icon = models.CharField(blank=True, null=True)
    ordering = models.IntegerField()
    public = models.BooleanField()
    group = models.ManyToManyField(Group)
    functionality = models.ManyToManyField(Functionality)
    interface = models.ManyToManyField("Interface", related_name="theme_interface")

    history = HistoricalRecords()

    class Meta:
        ordering = ["ordering"]
        verbose_name = _("Thème")
        verbose_name_plural = _("Thèmes")


class Treeitem(models.Model):
    type = models.CharField(max_length=10)
    name = models.CharField()
    description = models.CharField(blank=True, null=True)

    class Meta:
        unique_together = (("type", "name"),)
        verbose_name = _("Groupe de couche")
        verbose_name_plural = _("Groupe de couches")


class Treegroup(models.Model):
    treeitem = models.OneToOneField(
        Treeitem,
        models.DO_NOTHING,
        related_name="treegroup",
    )


class Tsearch(models.Model):
    """
    This model stores pre-calculated full text search data for improving performance
    """

    label = models.CharField(blank=True, null=True)
    layer_name = models.CharField(blank=True, null=True)
    ts = models.TextField(blank=True, null=True)  # This field type is a guess.
    the_geom = models.TextField(blank=True, null=True)  # This field type is a guess.
    public = models.BooleanField(blank=True, null=True)
    role = models.ForeignKey(Role, models.DO_NOTHING, blank=True, null=True)
    params = models.CharField(blank=True, null=True)
    interface = models.ForeignKey(Interface, models.DO_NOTHING, blank=True, null=True)
    lang = models.CharField(max_length=2, blank=True, null=True)
    actions = models.CharField(blank=True, null=True)
    from_theme = models.BooleanField(blank=True, null=True)
